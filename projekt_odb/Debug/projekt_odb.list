
projekt_odb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b74  08005b74  00006b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bbc  08005bbc  00006bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc4  08005bc4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bcc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08005bd8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005bd8  00007284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010755  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  00017791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000199b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6c  00000000  00000000  0001a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002611f  00000000  00000000  0001b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117ea  00000000  00000000  000414d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9a2  00000000  00000000  00052cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014165f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  001416a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001453c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b5c 	.word	0x08005b5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b5c 	.word	0x08005b5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <hc_sr04_init>:
#include "main.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
 80004c4:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2104      	movs	r1, #4
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 f928 	bl	8003734 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4610      	mov	r0, r2
 80004f0:	f002 ffb8 	bl	8003464 <HAL_TIM_PWM_Start>
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <hc_sr04_convert_us_to_cm>:

uint32_t hc_sr04_convert_us_to_cm(uint32_t distance_us)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <hc_sr04_convert_us_to_cm+0x20>)
 8000508:	fba2 2303 	umull	r2, r3, r2, r3
 800050c:	095b      	lsrs	r3, r3, #5
}
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	8d3dcb09 	.word	0x8d3dcb09

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b09e      	sub	sp, #120	@ 0x78
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f001 f86e 	bl	8001606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 fae5 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 fb35 	bl	8000b9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000532:	f000 fd27 	bl	8000f84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000536:	f000 fdc9 	bl	80010cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800053a:	f000 fe21 	bl	8001180 <MX_TIM3_Init>
  MX_TIM4_Init();
 800053e:	f000 fea3 	bl	8001288 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fb8b 	bl	8000c5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fbb9 	bl	8000cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 800054a:	2308      	movs	r3, #8
 800054c:	4aa4      	ldr	r2, [pc, #656]	@ (80007e0 <main+0x2c0>)
 800054e:	49a5      	ldr	r1, [pc, #660]	@ (80007e4 <main+0x2c4>)
 8000550:	48a5      	ldr	r0, [pc, #660]	@ (80007e8 <main+0x2c8>)
 8000552:	f7ff ffb1 	bl	80004b8 <hc_sr04_init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	48a4      	ldr	r0, [pc, #656]	@ (80007ec <main+0x2cc>)
 800055a:	f002 ff83 	bl	8003464 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800055e:	2104      	movs	r1, #4
 8000560:	48a2      	ldr	r0, [pc, #648]	@ (80007ec <main+0x2cc>)
 8000562:	f002 ff7f 	bl	8003464 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000566:	2108      	movs	r1, #8
 8000568:	48a1      	ldr	r0, [pc, #644]	@ (80007f0 <main+0x2d0>)
 800056a:	f002 ff7b 	bl	8003464 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800056e:	210c      	movs	r1, #12
 8000570:	489f      	ldr	r0, [pc, #636]	@ (80007f0 <main+0x2d0>)
 8000572:	f002 ff77 	bl	8003464 <HAL_TIM_PWM_Start>

      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000576:	4b9d      	ldr	r3, [pc, #628]	@ (80007ec <main+0x2cc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 800057e:	4b9b      	ldr	r3, [pc, #620]	@ (80007ec <main+0x2cc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000586:	4b9a      	ldr	r3, [pc, #616]	@ (80007f0 <main+0x2d0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 800058e:	4b98      	ldr	r3, [pc, #608]	@ (80007f0 <main+0x2d0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2200      	movs	r2, #0
 8000594:	641a      	str	r2, [r3, #64]	@ 0x40

      HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2120      	movs	r1, #32
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f001 fb7b 	bl	8001c98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	4893      	ldr	r0, [pc, #588]	@ (80007f4 <main+0x2d4>)
 80005a8:	f001 fb76 	bl	8001c98 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      uint8_t stan_init[5] = {0};
 80005ac:	2300      	movs	r3, #0
 80005ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80005b0:	2300      	movs	r3, #0
 80005b2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
      uint8_t stan[5] = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
      char message[100] = {0};
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2260      	movs	r2, #96	@ 0x60
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fa99 	bl	8005b02 <memset>
      uint8_t D1, D2, D3, D4, D5 = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      	  wyjscie:
      	 stan_init[0] = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
      	 stan[0] = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
      	 while(stan_init[0] != 'b' && stan_init[0] != 'l' && stan_init[0] != 'o') {
 80005e2:	e006      	b.n	80005f2 <main+0xd2>
      		HAL_UART_Receive(&huart1, stan_init, 5, 100);
 80005e4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	2205      	movs	r2, #5
 80005ec:	4882      	ldr	r0, [pc, #520]	@ (80007f8 <main+0x2d8>)
 80005ee:	f004 fcf1 	bl	8004fd4 <HAL_UART_Receive>
      	 while(stan_init[0] != 'b' && stan_init[0] != 'l' && stan_init[0] != 'o') {
 80005f2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80005f6:	2b62      	cmp	r3, #98	@ 0x62
 80005f8:	d100      	bne.n	80005fc <main+0xdc>
 80005fa:	e007      	b.n	800060c <main+0xec>
 80005fc:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000600:	2b6c      	cmp	r3, #108	@ 0x6c
 8000602:	d003      	beq.n	800060c <main+0xec>
 8000604:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000608:	2b6f      	cmp	r3, #111	@ 0x6f
 800060a:	d1eb      	bne.n	80005e4 <main+0xc4>
      	 }
            while (1) {
			//HAL_UART_Receive(&huart1, stan, 10, 100);
            D1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 800060c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000610:	4878      	ldr	r0, [pc, #480]	@ (80007f4 <main+0x2d4>)
 8000612:	f001 fb29 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            D2 = HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 800061c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000620:	4874      	ldr	r0, [pc, #464]	@ (80007f4 <main+0x2d4>)
 8000622:	f001 fb21 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            D3 = HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	4870      	ldr	r0, [pc, #448]	@ (80007f4 <main+0x2d4>)
 8000632:	f001 fb19 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            D4 = HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 800063c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000640:	486c      	ldr	r0, [pc, #432]	@ (80007f4 <main+0x2d4>)
 8000642:	f001 fb11 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            D5 = HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 800064c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000650:	4868      	ldr	r0, [pc, #416]	@ (80007f4 <main+0x2d4>)
 8000652:	f001 fb09 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (stan_init[0] == 'b') {
 800065c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000660:	2b62      	cmp	r3, #98	@ 0x62
 8000662:	f040 8086 	bne.w	8000772 <main+0x252>
            	 HAL_UART_Receive(&huart1, stan, 5, 0);
 8000666:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800066a:	2300      	movs	r3, #0
 800066c:	2205      	movs	r2, #5
 800066e:	4862      	ldr	r0, [pc, #392]	@ (80007f8 <main+0x2d8>)
 8000670:	f004 fcb0 	bl	8004fd4 <HAL_UART_Receive>
            	if (stan[0]=='w') {
 8000674:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000678:	2b77      	cmp	r3, #119	@ 0x77
 800067a:	d111      	bne.n	80006a0 <main+0x180>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800067c:	4b5b      	ldr	r3, [pc, #364]	@ (80007ec <main+0x2cc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
 8000684:	4b59      	ldr	r3, [pc, #356]	@ (80007ec <main+0x2cc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800068c:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800068e:	4b58      	ldr	r3, [pc, #352]	@ (80007f0 <main+0x2d0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 500);
 8000696:	4b56      	ldr	r3, [pc, #344]	@ (80007f0 <main+0x2d0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800069e:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				if (stan[0]=='s') {
 80006a0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80006a4:	2b73      	cmp	r3, #115	@ 0x73
 80006a6:	d111      	bne.n	80006cc <main+0x1ac>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 500);
 80006a8:	4b50      	ldr	r3, [pc, #320]	@ (80007ec <main+0x2cc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80006b2:	4b4e      	ldr	r3, [pc, #312]	@ (80007ec <main+0x2cc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 500);
 80006ba:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <main+0x2d0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006c2:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80006c4:	4b4a      	ldr	r3, [pc, #296]	@ (80007f0 <main+0x2d0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				if (stan[0]=='a') {
 80006cc:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80006d0:	2b61      	cmp	r3, #97	@ 0x61
 80006d2:	d110      	bne.n	80006f6 <main+0x1d6>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80006d4:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <main+0x2cc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2200      	movs	r2, #0
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <main+0x2cc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80006e4:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <main+0x2d0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 500);
 80006ec:	4b40      	ldr	r3, [pc, #256]	@ (80007f0 <main+0x2d0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006f4:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				if (stan[0]=='d') {
 80006f6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80006fa:	2b64      	cmp	r3, #100	@ 0x64
 80006fc:	d110      	bne.n	8000720 <main+0x200>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80006fe:	4b3b      	ldr	r3, [pc, #236]	@ (80007ec <main+0x2cc>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
 8000706:	4b39      	ldr	r3, [pc, #228]	@ (80007ec <main+0x2cc>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800070e:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000710:	4b37      	ldr	r3, [pc, #220]	@ (80007f0 <main+0x2d0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000718:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <main+0x2d0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				if (stan[0]=='x') {
 8000720:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000724:	2b78      	cmp	r3, #120	@ 0x78
 8000726:	d10f      	bne.n	8000748 <main+0x228>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000728:	4b30      	ldr	r3, [pc, #192]	@ (80007ec <main+0x2cc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8000730:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <main+0x2cc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <main+0x2d0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <main+0x2d0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2200      	movs	r2, #0
 8000746:	641a      	str	r2, [r3, #64]	@ 0x40
				}
				if (stan[0]=='e') {
 8000748:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800074c:	2b65      	cmp	r3, #101	@ 0x65
 800074e:	d110      	bne.n	8000772 <main+0x252>
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <main+0x2cc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <main+0x2cc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2200      	movs	r2, #0
 800075e:	639a      	str	r2, [r3, #56]	@ 0x38
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <main+0x2d0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
					__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <main+0x2d0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	641a      	str	r2, [r3, #64]	@ 0x40
					goto wyjscie;
 8000770:	e731      	b.n	80005d6 <main+0xb6>
				}
            }
            	if (stan_init[0]=='o'){
 8000772:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000776:	2b6f      	cmp	r3, #111	@ 0x6f
 8000778:	d17f      	bne.n	800087a <main+0x35a>
            		HAL_UART_Receive(&huart1, stan, 5, 0);
 800077a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800077e:	2300      	movs	r3, #0
 8000780:	2205      	movs	r2, #5
 8000782:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <main+0x2d8>)
 8000784:	f004 fc26 	bl	8004fd4 <HAL_UART_Receive>
            		if (stan[0]=='e') {
 8000788:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800078c:	2b65      	cmp	r3, #101	@ 0x65
 800078e:	d110      	bne.n	80007b2 <main+0x292>
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <main+0x2cc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <main+0x2cc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	639a      	str	r2, [r3, #56]	@ 0x38
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <main+0x2d0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2200      	movs	r2, #0
 80007a6:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <main+0x2d0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	641a      	str	r2, [r3, #64]	@ 0x40
						goto wyjscie;
 80007b0:	e711      	b.n	80005d6 <main+0xb6>
					}
            		if(distance_sensor.distance_cm<=10){
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <main+0x2c8>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d820      	bhi.n	80007fc <main+0x2dc>
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 400);
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <main+0x2cc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007c2:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <main+0x2cc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	639a      	str	r2, [r3, #56]	@ 0x38
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 400);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <main+0x2d0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007d4:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <main+0x2d0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80007de:	e04c      	b.n	800087a <main+0x35a>
 80007e0:	2000019c 	.word	0x2000019c
 80007e4:	20000150 	.word	0x20000150
 80007e8:	20000140 	.word	0x20000140
 80007ec:	200001e8 	.word	0x200001e8
 80007f0:	20000234 	.word	0x20000234
 80007f4:	48000400 	.word	0x48000400
 80007f8:	20000028 	.word	0x20000028
					} else if(distance_sensor.distance_cm<=40){
 80007fc:	4b87      	ldr	r3, [pc, #540]	@ (8000a1c <main+0x4fc>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	2b28      	cmp	r3, #40	@ 0x28
 8000802:	d811      	bhi.n	8000828 <main+0x308>
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000804:	4b86      	ldr	r3, [pc, #536]	@ (8000a20 <main+0x500>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	@ 0x34
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 800080c:	4b84      	ldr	r3, [pc, #528]	@ (8000a20 <main+0x500>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	@ 0x38
            			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000814:	4b83      	ldr	r3, [pc, #524]	@ (8000a24 <main+0x504>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	@ 0x3c
            			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 400);
 800081c:	4b81      	ldr	r3, [pc, #516]	@ (8000a24 <main+0x504>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000824:	641a      	str	r2, [r3, #64]	@ 0x40
 8000826:	e028      	b.n	800087a <main+0x35a>
            		} else if(distance_sensor.distance_cm<=70){
 8000828:	4b7c      	ldr	r3, [pc, #496]	@ (8000a1c <main+0x4fc>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	2b46      	cmp	r3, #70	@ 0x46
 800082e:	d812      	bhi.n	8000856 <main+0x336>
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000830:	4b7b      	ldr	r3, [pc, #492]	@ (8000a20 <main+0x500>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 300);
 8000838:	4b79      	ldr	r3, [pc, #484]	@ (8000a20 <main+0x500>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000840:	639a      	str	r2, [r3, #56]	@ 0x38
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000842:	4b78      	ldr	r3, [pc, #480]	@ (8000a24 <main+0x504>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 400);
 800084a:	4b76      	ldr	r3, [pc, #472]	@ (8000a24 <main+0x504>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
 8000854:	e011      	b.n	800087a <main+0x35a>
					}  else {
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000856:	4b72      	ldr	r3, [pc, #456]	@ (8000a20 <main+0x500>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 400);
 800085e:	4b70      	ldr	r3, [pc, #448]	@ (8000a20 <main+0x500>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000866:	639a      	str	r2, [r3, #56]	@ 0x38
            			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000868:	4b6e      	ldr	r3, [pc, #440]	@ (8000a24 <main+0x504>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	@ 0x3c
            			__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 400);
 8000870:	4b6c      	ldr	r3, [pc, #432]	@ (8000a24 <main+0x504>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000878:	641a      	str	r2, [r3, #64]	@ 0x40
            		}

            	}
            	if(stan_init[0]=='l') {
 800087a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800087e:	2b6c      	cmp	r3, #108	@ 0x6c
 8000880:	f47f aec4 	bne.w	800060c <main+0xec>
            		HAL_UART_Receive(&huart1, stan, 5, 0);
 8000884:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000888:	2300      	movs	r3, #0
 800088a:	2205      	movs	r2, #5
 800088c:	4866      	ldr	r0, [pc, #408]	@ (8000a28 <main+0x508>)
 800088e:	f004 fba1 	bl	8004fd4 <HAL_UART_Receive>
            		if (stan[0]=='e') {\
 8000892:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000896:	2b65      	cmp	r3, #101	@ 0x65
 8000898:	d110      	bne.n	80008bc <main+0x39c>
            			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800089a:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <main+0x500>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
						__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80008a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a20 <main+0x500>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80008aa:	4b5e      	ldr	r3, [pc, #376]	@ (8000a24 <main+0x504>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	63da      	str	r2, [r3, #60]	@ 0x3c
						__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 80008b2:	4b5c      	ldr	r3, [pc, #368]	@ (8000a24 <main+0x504>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	641a      	str	r2, [r3, #64]	@ 0x40
						goto wyjscie;
 80008ba:	e68c      	b.n	80005d6 <main+0xb6>
					}
					D1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 80008bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c0:	485a      	ldr	r0, [pc, #360]	@ (8000a2c <main+0x50c>)
 80008c2:	f001 f9d1 	bl	8001c68 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
					D2 = HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 80008cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d0:	4856      	ldr	r0, [pc, #344]	@ (8000a2c <main+0x50c>)
 80008d2:	f001 f9c9 	bl	8001c68 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
					D3 = HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 80008dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e0:	4852      	ldr	r0, [pc, #328]	@ (8000a2c <main+0x50c>)
 80008e2:	f001 f9c1 	bl	8001c68 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					D4 = HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 80008ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f0:	484e      	ldr	r0, [pc, #312]	@ (8000a2c <main+0x50c>)
 80008f2:	f001 f9b9 	bl	8001c68 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
					D5 = HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 80008fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000900:	484a      	ldr	r0, [pc, #296]	@ (8000a2c <main+0x50c>)
 8000902:	f001 f9b1 	bl	8001c68 <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            /*snprintf(message, sizeof(message), " %d %d %d %d %d", D1, D2, D3, D4, D5);
                        HAL_UART_Transmit(&huart2, message, 100, 100);
                      	HAL_UART_Transmit(&huart1, message, 100, 100);*/
			  if (D2==1 && D3==1 && D4==1 || D2==1 && D3==1 || D3 == 1 && D4==1 || D3 == 1) {
 800090c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000910:	2b01      	cmp	r3, #1
 8000912:	d107      	bne.n	8000924 <main+0x404>
 8000914:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <main+0x404>
 800091c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000920:	2b01      	cmp	r3, #1
 8000922:	d013      	beq.n	800094c <main+0x42c>
 8000924:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000928:	2b01      	cmp	r3, #1
 800092a:	d103      	bne.n	8000934 <main+0x414>
 800092c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000930:	2b01      	cmp	r3, #1
 8000932:	d00b      	beq.n	800094c <main+0x42c>
 8000934:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000938:	2b01      	cmp	r3, #1
 800093a:	d103      	bne.n	8000944 <main+0x424>
 800093c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000940:	2b01      	cmp	r3, #1
 8000942:	d003      	beq.n	800094c <main+0x42c>
 8000944:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000948:	2b01      	cmp	r3, #1
 800094a:	d120      	bne.n	800098e <main+0x46e>
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 800094c:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <main+0x504>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 500);
 8000954:	4b33      	ldr	r3, [pc, #204]	@ (8000a24 <main+0x504>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800095c:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800095e:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <main+0x500>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
 8000966:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <main+0x500>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800096e:	639a      	str	r2, [r3, #56]	@ 0x38
				silniki[0] = 0;
 8000970:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <main+0x510>)
 8000972:	2200      	movs	r2, #0
 8000974:	801a      	strh	r2, [r3, #0]
				silniki[1] = 500;
 8000976:	4b2e      	ldr	r3, [pc, #184]	@ (8000a30 <main+0x510>)
 8000978:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800097c:	805a      	strh	r2, [r3, #2]
				silniki[2] = 0;
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <main+0x510>)
 8000980:	2200      	movs	r2, #0
 8000982:	809a      	strh	r2, [r3, #4]
				silniki[3] = 500;
 8000984:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <main+0x510>)
 8000986:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800098a:	80da      	strh	r2, [r3, #6]
 800098c:	e0ad      	b.n	8000aea <main+0x5ca>
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 500);
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
			  }*/
			  else if (D1==1 && D2==1 && D3==1 && D4 == 1 || D1==1 && D2==1 && D3==1 || D1==1 && D2==1 || D1 == 1) {
 800098e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10b      	bne.n	80009ae <main+0x48e>
 8000996:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800099a:	2b01      	cmp	r3, #1
 800099c:	d107      	bne.n	80009ae <main+0x48e>
 800099e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d103      	bne.n	80009ae <main+0x48e>
 80009a6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d017      	beq.n	80009de <main+0x4be>
 80009ae:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d107      	bne.n	80009c6 <main+0x4a6>
 80009b6:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d103      	bne.n	80009c6 <main+0x4a6>
 80009be:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00b      	beq.n	80009de <main+0x4be>
 80009c6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d103      	bne.n	80009d6 <main+0x4b6>
 80009ce:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d003      	beq.n	80009de <main+0x4be>
 80009d6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d12a      	bne.n	8000a34 <main+0x514>
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <main+0x504>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 500);
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <main+0x504>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009ee:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <main+0x500>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <main+0x500>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	639a      	str	r2, [r3, #56]	@ 0x38
				silniki[0] = 0;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <main+0x510>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	801a      	strh	r2, [r3, #0]
				silniki[1] = 500;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <main+0x510>)
 8000a08:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a0c:	805a      	strh	r2, [r3, #2]
				silniki[2] = 0;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <main+0x510>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	809a      	strh	r2, [r3, #4]
				silniki[3] = 0;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <main+0x510>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	80da      	strh	r2, [r3, #6]
 8000a1a:	e066      	b.n	8000aea <main+0x5ca>
 8000a1c:	20000140 	.word	0x20000140
 8000a20:	200001e8 	.word	0x200001e8
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000028 	.word	0x20000028
 8000a2c:	48000400 	.word	0x48000400
 8000a30:	20000138 	.word	0x20000138
			  }
			  else if (D2==1 && D3==1 && D4==1 && D5==1 || D3==1 && D4==1 && D5==1 || D4==1 && D5==1 || D5 == 1) {
 8000a34:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10b      	bne.n	8000a54 <main+0x534>
 8000a3c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d107      	bne.n	8000a54 <main+0x534>
 8000a44:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d103      	bne.n	8000a54 <main+0x534>
 8000a4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d017      	beq.n	8000a84 <main+0x564>
 8000a54:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <main+0x54c>
 8000a5c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d103      	bne.n	8000a6c <main+0x54c>
 8000a64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00b      	beq.n	8000a84 <main+0x564>
 8000a6c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d103      	bne.n	8000a7c <main+0x55c>
 8000a74:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d003      	beq.n	8000a84 <main+0x564>
 8000a7c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d11e      	bne.n	8000ac2 <main+0x5a2>
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <main+0x5cc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <main+0x5cc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <main+0x5d0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <main+0x5d0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000aa4:	639a      	str	r2, [r3, #56]	@ 0x38
				silniki[0] = 0;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <main+0x5d4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]
				silniki[1] = 0;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <main+0x5d4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	805a      	strh	r2, [r3, #2]
				silniki[2] = 0;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <main+0x5d4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	809a      	strh	r2, [r3, #4]
				silniki[3] = 500;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <main+0x5d4>)
 8000aba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000abe:	80da      	strh	r2, [r3, #6]
 8000ac0:	e013      	b.n	8000aea <main+0x5ca>
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 500);
			  }*/
			  else {
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, silniki[0]);
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <main+0x5d4>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <main+0x5cc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, silniki[1]);
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <main+0x5d4>)
 8000ace:	885a      	ldrh	r2, [r3, #2]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <main+0x5cc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, silniki[2]);
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <main+0x5d4>)
 8000ad8:	889a      	ldrh	r2, [r3, #4]
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <main+0x5d0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, silniki[3]);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <main+0x5d4>)
 8000ae2:	88da      	ldrh	r2, [r3, #6]
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <main+0x5d0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
            D1 = HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8000aea:	e58f      	b.n	800060c <main+0xec>
 8000aec:	20000234 	.word	0x20000234
 8000af0:	200001e8 	.word	0x200001e8
 8000af4:	20000138 	.word	0x20000138

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b096      	sub	sp, #88	@ 0x58
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2244      	movs	r2, #68	@ 0x44
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fffb 	bl	8005b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b1e:	f001 f8e1 	bl	8001ce4 <HAL_PWREx_ControlVoltageScaling>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b28:	f000 f914 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b34:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b36:	2310      	movs	r3, #16
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b46:	230a      	movs	r3, #10
 8000b48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f918 	bl	8001d90 <HAL_RCC_OscConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b66:	f000 f8f5 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2104      	movs	r1, #4
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fce0 	bl	8002548 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b8e:	f000 f8e1 	bl	8000d54 <Error_Handler>
  }
}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	@ 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4a27      	ldr	r2, [pc, #156]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4b25      	ldr	r3, [pc, #148]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_GPIO_Init+0xb8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f001 f855 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2140      	movs	r1, #64	@ 0x40
 8000bf2:	4819      	ldr	r0, [pc, #100]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000bf4:	f001 f850 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c12:	f000 fe7f 	bl	8001914 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|D3_Pin|D2_Pin
 8000c16:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c1a:	60fb      	str	r3, [r7, #12]
                          |D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000c2c:	f000 fe72 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENB_Pin */
  GPIO_InitStruct.Pin = ENB_Pin;
 8000c30:	2340      	movs	r3, #64	@ 0x40
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENB_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_GPIO_Init+0xbc>)
 8000c48:	f000 fe64 	bl	8001914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <MX_USART1_UART_Init+0x5c>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART1_UART_Init+0x58>)
 8000ca0:	f004 f94a 	bl	8004f38 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 f853 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000028 	.word	0x20000028
 8000cb8:	40013800 	.word	0x40013800

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <MX_USART2_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x58>)
 8000d00:	f004 f91a 	bl	8004f38 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 f823 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000b0 	.word	0x200000b0
 8000d18:	40004400 	.word	0x40004400

08000d1c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x30>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10a      	bne.n	8000d44 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d2e:	2104      	movs	r1, #4
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f003 fa07 	bl	8004144 <HAL_TIM_ReadCapturedValue>
 8000d36:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f7ff fbdf 	bl	80004fc <hc_sr04_convert_us_to_cm>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000d42:	60d3      	str	r3, [r2, #12]
	}
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	20000140 	.word	0x20000140

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <Error_Handler+0x8>

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	4a08      	ldr	r2, [pc, #32]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_UART_MspInit>:

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0ae      	sub	sp, #184	@ 0xb8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	2288      	movs	r2, #136	@ 0x88
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fe9a 	bl	8005b02 <memset>
  if(huart->Instance==USART1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a43      	ldr	r2, [pc, #268]	@ (8000ee0 <HAL_UART_MspInit+0x138>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d13d      	bne.n	8000e54 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fdd3 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df0:	f7ff ffb0 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e00:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a34      	ldr	r2, [pc, #208]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f000 fd61 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e52:	e040      	b.n	8000ed6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a23      	ldr	r2, [pc, #140]	@ (8000ee8 <HAL_UART_MspInit+0x140>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d13b      	bne.n	8000ed6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fd90 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000e76:	f7ff ff6d 	bl	8000d54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0x13c>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed2:	f000 fd1f 	bl	8001914 <HAL_GPIO_Init>
}
 8000ed6:	bf00      	nop
 8000ed8:	37b8      	adds	r7, #184	@ 0xb8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40004400 	.word	0x40004400

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 fbb5 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <TIM1_CC_IRQHandler+0x10>)
 8000f52:	f002 fd39 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000150 	.word	0x20000150

08000f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	@ 0x40
 8000f88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000fc0:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fc2:	4a41      	ldr	r2, [pc, #260]	@ (80010c8 <MX_TIM1_Init+0x144>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fc8:	224f      	movs	r2, #79	@ 0x4f
 8000fca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe0:	4b38      	ldr	r3, [pc, #224]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b37      	ldr	r3, [pc, #220]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fec:	4835      	ldr	r0, [pc, #212]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8000fee:	f002 f98b 	bl	8003308 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ff8:	f7ff feac 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001006:	4619      	mov	r1, r3
 8001008:	482e      	ldr	r0, [pc, #184]	@ (80010c4 <MX_TIM1_Init+0x140>)
 800100a:	f002 ff8f 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001014:	f7ff fe9e 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001018:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <MX_TIM1_Init+0x140>)
 800101a:	f002 fb29 	bl	8003670 <HAL_TIM_IC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001024:	f7ff fe96 	bl	8000d54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001028:	2304      	movs	r3, #4
 800102a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800102c:	2350      	movs	r3, #80	@ 0x50
 800102e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4820      	ldr	r0, [pc, #128]	@ (80010c4 <MX_TIM1_Init+0x140>)
 8001044:	f003 f83b 	bl	80040be <HAL_TIM_SlaveConfigSynchro>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800104e:	f7ff fe81 	bl	8000d54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001056:	2301      	movs	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <MX_TIM1_Init+0x140>)
 800106c:	f002 fdae 	bl	8003bcc <HAL_TIM_IC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001076:	f7ff fe6d 	bl	8000d54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800107a:	2302      	movs	r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <MX_TIM1_Init+0x140>)
 800108c:	f002 fd9e 	bl	8003bcc <HAL_TIM_IC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001096:	f7ff fe5d 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <MX_TIM1_Init+0x140>)
 80010ac:	f003 fe9e 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80010b6:	f7ff fe4d 	bl	8000d54 <Error_Handler>
  }

}
 80010ba:	bf00      	nop
 80010bc:	3740      	adds	r7, #64	@ 0x40
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000150 	.word	0x20000150
 80010c8:	40012c00 	.word	0x40012c00

080010cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80010f0:	4b22      	ldr	r3, [pc, #136]	@ (800117c <MX_TIM2_Init+0xb0>)
 80010f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <MX_TIM2_Init+0xb0>)
 80010fa:	224f      	movs	r2, #79	@ 0x4f
 80010fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <MX_TIM2_Init+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62500-1;
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <MX_TIM2_Init+0xb0>)
 8001106:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800110a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_TIM2_Init+0xb0>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_TIM2_Init+0xb0>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001118:	4818      	ldr	r0, [pc, #96]	@ (800117c <MX_TIM2_Init+0xb0>)
 800111a:	f002 f94c 	bl	80033b6 <HAL_TIM_PWM_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001124:	f7ff fe16 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4811      	ldr	r0, [pc, #68]	@ (800117c <MX_TIM2_Init+0xb0>)
 8001138:	f003 fe58 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001142:	f7ff fe07 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001146:	2360      	movs	r3, #96	@ 0x60
 8001148:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800114a:	230a      	movs	r3, #10
 800114c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <MX_TIM2_Init+0xb0>)
 800115e:	f002 fdd1 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001168:	f7ff fdf4 	bl	8000d54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <MX_TIM2_Init+0xb0>)
 800116e:	f000 f9a1 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000019c 	.word	0x2000019c

08001180 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b2:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011b4:	4a33      	ldr	r2, [pc, #204]	@ (8001284 <MX_TIM3_Init+0x104>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000;
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011ba:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80011be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011c8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80011cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011da:	4829      	ldr	r0, [pc, #164]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011dc:	f002 f894 	bl	8003308 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f7ff fdb5 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4822      	ldr	r0, [pc, #136]	@ (8001280 <MX_TIM3_Init+0x100>)
 80011f8:	f002 fe98 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001202:	f7ff fda7 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001206:	481e      	ldr	r0, [pc, #120]	@ (8001280 <MX_TIM3_Init+0x100>)
 8001208:	f002 f8d5 	bl	80033b6 <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001212:	f7ff fd9f 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4816      	ldr	r0, [pc, #88]	@ (8001280 <MX_TIM3_Init+0x100>)
 8001226:	f003 fde1 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001230:	f7ff fd90 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	@ 0x60
 8001236:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_TIM3_Init+0x100>)
 800124c:	f002 fd5a 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001256:	f7ff fd7d 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <MX_TIM3_Init+0x100>)
 8001262:	f002 fd4f 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800126c:	f7ff fd72 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <MX_TIM3_Init+0x100>)
 8001272:	f000 f91f 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 8001276:	bf00      	nop
 8001278:	3738      	adds	r7, #56	@ 0x38
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001e8 	.word	0x200001e8
 8001284:	40000400 	.word	0x40000400

08001288 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	@ 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ba:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012bc:	4a33      	ldr	r2, [pc, #204]	@ (800138c <MX_TIM4_Init+0x104>)
 80012be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000;
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012c2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80012c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012d0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80012d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012e2:	4829      	ldr	r0, [pc, #164]	@ (8001388 <MX_TIM4_Init+0x100>)
 80012e4:	f002 f810 	bl	8003308 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f7ff fd31 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4822      	ldr	r0, [pc, #136]	@ (8001388 <MX_TIM4_Init+0x100>)
 8001300:	f002 fe14 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800130a:	f7ff fd23 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800130e:	481e      	ldr	r0, [pc, #120]	@ (8001388 <MX_TIM4_Init+0x100>)
 8001310:	f002 f851 	bl	80033b6 <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800131a:	f7ff fd1b 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4816      	ldr	r0, [pc, #88]	@ (8001388 <MX_TIM4_Init+0x100>)
 800132e:	f003 fd5d 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001338:	f7ff fd0c 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	2360      	movs	r3, #96	@ 0x60
 800133e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2208      	movs	r2, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_TIM4_Init+0x100>)
 8001354:	f002 fcd6 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800135e:	f7ff fcf9 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	220c      	movs	r2, #12
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	@ (8001388 <MX_TIM4_Init+0x100>)
 800136a:	f002 fccb 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001374:	f7ff fcee 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <MX_TIM4_Init+0x100>)
 800137a:	f000 f89b 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	@ 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000234 	.word	0x20000234
 800138c:	40000800 	.word	0x40000800

08001390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001468 <HAL_TIM_Base_MspInit+0xd8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d132      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	4a2d      	ldr	r2, [pc, #180]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80013e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f000 fa87 	bl	8001914 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	201b      	movs	r0, #27
 800140c:	f000 fa4b 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001410:	201b      	movs	r0, #27
 8001412:	f000 fa64 	bl	80018de <HAL_NVIC_EnableIRQ>
      __HAL_RCC_TIM4_CLK_ENABLE();
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
    }
}
 8001416:	e022      	b.n	800145e <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <HAL_TIM_Base_MspInit+0xe0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10c      	bne.n	800143c <HAL_TIM_Base_MspInit+0xac>
      __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
}
 800143a:	e010      	b.n	800145e <HAL_TIM_Base_MspInit+0xce>
    else if(tim_baseHandle->Instance==TIM4)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <HAL_TIM_Base_MspInit+0xe4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10b      	bne.n	800145e <HAL_TIM_Base_MspInit+0xce>
      __HAL_RCC_TIM4_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_TIM_Base_MspInit+0xdc>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40012c00 	.word	0x40012c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40000400 	.word	0x40000400
 8001474:	40000800 	.word	0x40000800

08001478 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001488:	d10b      	bne.n	80014a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_TIM_PWM_MspInit+0x38>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d4:	d11d      	bne.n	8001512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 80014ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4827      	ldr	r0, [pc, #156]	@ (80015a8 <HAL_TIM_MspPostInit+0xf4>)
 800150c:	f000 fa02 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001510:	e044      	b.n	800159c <HAL_TIM_MspPostInit+0xe8>
else if(timHandle->Instance==TIM3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_TIM_MspPostInit+0xf8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d11d      	bne.n	8001558 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001520:	4a20      	ldr	r2, [pc, #128]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001534:	23c0      	movs	r3, #192	@ 0xc0
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001544:	2302      	movs	r3, #2
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f000 f9df 	bl	8001914 <HAL_GPIO_Init>
}
 8001556:	e021      	b.n	800159c <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a14      	ldr	r2, [pc, #80]	@ (80015b0 <HAL_TIM_MspPostInit+0xfc>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d11c      	bne.n	800159c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_TIM_MspPostInit+0xf0>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <HAL_TIM_MspPostInit+0xf4>)
 8001598:	f000 f9bc 	bl	8001914 <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40000800 	.word	0x40000800

080015b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b8:	f7ff fcd2 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f004 fa97 	bl	8005b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015e6:	f7fe ff9b 	bl	8000520 <main>

080015ea <LoopForever>:

LoopForever:
    b LoopForever
 80015ea:	e7fe      	b.n	80015ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015f8:	08005bcc 	.word	0x08005bcc
  ldr r2, =_sbss
 80015fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001600:	20000284 	.word	0x20000284

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>

08001606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 f93d 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001616:	200f      	movs	r0, #15
 8001618:	f000 f80e 	bl	8001638 <HAL_InitTick>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	e001      	b.n	800162c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001628:	f7ff fb9a 	bl	8000d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800162c:	79fb      	ldrb	r3, [r7, #7]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_InitTick+0x6c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_InitTick+0x70>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_InitTick+0x6c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f949 	bl	80018fa <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d809      	bhi.n	8001688 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f913 	bl	80018a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001680:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_InitTick+0x74>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e007      	b.n	8001698 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e004      	b.n	8001698 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	e001      	b.n	8001698 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000280 	.word	0x20000280

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000280 	.word	0x20000280

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	@ (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	@ (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	@ (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	@ (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e17f      	b.n	8001c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8171 	beq.w	8001c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x40>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d118      	bne.n	80019f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	6939      	ldr	r1, [r7, #16]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80ac 	beq.w	8001c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c44 <HAL_GPIO_Init+0x330>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aca:	4a5e      	ldr	r2, [pc, #376]	@ (8001c44 <HAL_GPIO_Init+0x330>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c44 <HAL_GPIO_Init+0x330>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ade:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_GPIO_Init+0x334>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x242>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c4c <HAL_GPIO_Init+0x338>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x23e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4e      	ldr	r2, [pc, #312]	@ (8001c50 <HAL_GPIO_Init+0x33c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x23a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c54 <HAL_GPIO_Init+0x340>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x236>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	@ (8001c58 <HAL_GPIO_Init+0x344>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x232>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c5c <HAL_GPIO_Init+0x348>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x22e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_GPIO_Init+0x34c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x22a>
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x244>
 8001b56:	2300      	movs	r3, #0
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_GPIO_Init+0x334>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b9a:	4a32      	ldr	r2, [pc, #200]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc4:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bca:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f ae78 	bne.w	8001924 <HAL_GPIO_Init+0x10>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	48001400 	.word	0x48001400
 8001c60:	48001800 	.word	0x48001800
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf2:	d130      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d00:	d038      	beq.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2232      	movs	r2, #50	@ 0x32
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d28:	e002      	b.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3c:	d102      	bne.n	8001d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f2      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d50:	d110      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e00f      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d62:	d007      	beq.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d6c:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40007000 	.word	0x40007000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e3ca      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b97      	ldr	r3, [pc, #604]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b94      	ldr	r3, [pc, #592]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80e4 	beq.w	8001f8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_RCC_OscConfig+0x4a>
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	f040 808b 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 8087 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dda:	4b89      	ldr	r3, [pc, #548]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x62>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e3a2      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_RCC_OscConfig+0x7c>
 8001e02:	4b7f      	ldr	r3, [pc, #508]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_OscConfig+0x88>
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d223      	bcs.n	8001e64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fd55 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e383      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	4b73      	ldr	r3, [pc, #460]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a72      	ldr	r2, [pc, #456]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b70      	ldr	r3, [pc, #448]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	496d      	ldr	r1, [pc, #436]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4968      	ldr	r1, [pc, #416]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b63      	ldr	r3, [pc, #396]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4960      	ldr	r1, [pc, #384]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e82:	4b5f      	ldr	r3, [pc, #380]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	495b      	ldr	r1, [pc, #364]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fd15 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e343      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb0:	f000 fc4a 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	4950      	ldr	r1, [pc, #320]	@ (8002004 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8002008 <HAL_RCC_OscConfig+0x278>)
 8001ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fbaf 	bl	8001638 <HAL_InitTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d052      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	e327      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d032      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef0:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a42      	ldr	r2, [pc, #264]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fbec 	bl	80016d8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f04:	f7ff fbe8 	bl	80016d8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e310      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f16:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a36      	ldr	r2, [pc, #216]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4931      	ldr	r1, [pc, #196]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	492c      	ldr	r1, [pc, #176]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e01a      	b.n	8001f8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a29      	ldr	r2, [pc, #164]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fbb9 	bl	80016d8 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fbb5 	bl	80016d8 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2dd      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x1da>
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d074      	beq.n	8002082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x21a>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d10e      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d064      	beq.n	8002080 <HAL_RCC_OscConfig+0x2f0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d160      	bne.n	8002080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e2ba      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x24a>
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e026      	b.n	8002028 <HAL_RCC_OscConfig+0x298>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe2:	d115      	bne.n	8002010 <HAL_RCC_OscConfig+0x280>
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b03      	ldr	r3, [pc, #12]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a02      	ldr	r2, [pc, #8]	@ (8002000 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x298>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	08005b74 	.word	0x08005b74
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004
 8002010:	4ba0      	ldr	r3, [pc, #640]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a9f      	ldr	r2, [pc, #636]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b9d      	ldr	r3, [pc, #628]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a9c      	ldr	r2, [pc, #624]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fb52 	bl	80016d8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7ff fb4e 	bl	80016d8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	@ 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e276      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	4b92      	ldr	r3, [pc, #584]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x2a8>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fb3e 	bl	80016d8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fb3a 	bl	80016d8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e262      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002072:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d0>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d060      	beq.n	8002150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x310>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d119      	bne.n	80020ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d116      	bne.n	80020ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x328>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e23f      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	4973      	ldr	r1, [pc, #460]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	e040      	b.n	8002150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d023      	beq.n	800211e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff faf9 	bl	80016d8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff faf5 	bl	80016d8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e21d      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	4b65      	ldr	r3, [pc, #404]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b62      	ldr	r3, [pc, #392]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	495f      	ldr	r1, [pc, #380]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e018      	b.n	8002150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5c      	ldr	r2, [pc, #368]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff fad5 	bl	80016d8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff fad1 	bl	80016d8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1f9      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	4b53      	ldr	r3, [pc, #332]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d03c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01c      	beq.n	800219e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002164:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216a:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff fab0 	bl	80016d8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff faac 	bl	80016d8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1d4      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218e:	4b41      	ldr	r3, [pc, #260]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCC_OscConfig+0x3ec>
 800219c:	e01b      	b.n	80021d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219e:	4b3d      	ldr	r3, [pc, #244]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff fa93 	bl	80016d8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b6:	f7ff fa8f 	bl	80016d8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1b7      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ef      	bne.n	80021b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80a6 	beq.w	8002330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220c:	2301      	movs	r3, #1
 800220e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d118      	bne.n	800224e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002228:	f7ff fa56 	bl	80016d8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7ff fa52 	bl	80016d8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e17a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_RCC_OscConfig+0x508>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x4d8>
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002266:	e029      	b.n	80022bc <HAL_RCC_OscConfig+0x52c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d115      	bne.n	800229c <HAL_RCC_OscConfig+0x50c>
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002276:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	4a03      	ldr	r2, [pc, #12]	@ (8002294 <HAL_RCC_OscConfig+0x504>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002290:	e014      	b.n	80022bc <HAL_RCC_OscConfig+0x52c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	4b9c      	ldr	r3, [pc, #624]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a2:	4a9b      	ldr	r2, [pc, #620]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ac:	4b98      	ldr	r3, [pc, #608]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b2:	4a97      	ldr	r2, [pc, #604]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d016      	beq.n	80022f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff fa08 	bl	80016d8 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7ff fa04 	bl	80016d8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e12a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ed      	beq.n	80022cc <HAL_RCC_OscConfig+0x53c>
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7ff f9f1 	bl	80016d8 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff f9ed 	bl	80016d8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e113      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002310:	4b7f      	ldr	r3, [pc, #508]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ed      	bne.n	80022fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b7a      	ldr	r3, [pc, #488]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	4a79      	ldr	r2, [pc, #484]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80fe 	beq.w	8002536 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 80d0 	bne.w	80024e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002344:	4b72      	ldr	r3, [pc, #456]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	429a      	cmp	r2, r3
 8002356:	d130      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	3b01      	subs	r3, #1
 8002364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d127      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d11f      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002384:	2a07      	cmp	r2, #7
 8002386:	bf14      	ite	ne
 8002388:	2201      	movne	r2, #1
 800238a:	2200      	moveq	r2, #0
 800238c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	3b01      	subs	r3, #1
 80023a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d06e      	beq.n	8002498 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d069      	beq.n	8002494 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0ad      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80023e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023e8:	f7ff f976 	bl	80016d8 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f972 	bl	80016d8 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e09a      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002402:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240e:	4b40      	ldr	r3, [pc, #256]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <HAL_RCC_OscConfig+0x784>)
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800241e:	3a01      	subs	r2, #1
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002428:	0212      	lsls	r2, r2, #8
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002430:	0852      	lsrs	r2, r2, #1
 8002432:	3a01      	subs	r2, #1
 8002434:	0552      	lsls	r2, r2, #21
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800243c:	0852      	lsrs	r2, r2, #1
 800243e:	3a01      	subs	r2, #1
 8002440:	0652      	lsls	r2, r2, #25
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002448:	0912      	lsrs	r2, r2, #4
 800244a:	0452      	lsls	r2, r2, #17
 800244c:	430a      	orrs	r2, r1
 800244e:	4930      	ldr	r1, [pc, #192]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002454:	4b2e      	ldr	r3, [pc, #184]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2d      	ldr	r2, [pc, #180]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246c:	f7ff f934 	bl	80016d8 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7ff f930 	bl	80016d8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e058      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002492:	e050      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e04f      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d148      	bne.n	8002536 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b0:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024bc:	f7ff f90c 	bl	80016d8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff f908 	bl	80016d8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e030      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x734>
 80024e2:	e028      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d023      	beq.n	8002532 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_RCC_OscConfig+0x780>)
 80024f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7ff f8ef 	bl	80016d8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e00c      	b.n	8002518 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff f8eb 	bl	80016d8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d905      	bls.n	8002518 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e013      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
 8002510:	40021000 	.word	0x40021000
 8002514:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ec      	bne.n	80024fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4905      	ldr	r1, [pc, #20]	@ (8002540 <HAL_RCC_OscConfig+0x7b0>)
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_OscConfig+0x7b4>)
 800252c:	4013      	ands	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
 8002530:	e001      	b.n	8002536 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	feeefffc 	.word	0xfeeefffc

08002548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0e7      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b75      	ldr	r3, [pc, #468]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b72      	ldr	r3, [pc, #456]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	4970      	ldr	r1, [pc, #448]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b6e      	ldr	r3, [pc, #440]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0cf      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b63      	ldr	r3, [pc, #396]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4960      	ldr	r1, [pc, #384]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04c      	beq.n	8002660 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d121      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0a6      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e6:	4b54      	ldr	r3, [pc, #336]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e09a      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e08e      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260e:	4b4a      	ldr	r3, [pc, #296]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e086      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b46      	ldr	r3, [pc, #280]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4943      	ldr	r1, [pc, #268]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002630:	f7ff f852 	bl	80016d8 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f84e 	bl	80016d8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e06e      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002678:	429a      	cmp	r2, r3
 800267a:	d208      	bcs.n	800268e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	492b      	ldr	r1, [pc, #172]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268e:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d210      	bcs.n	80026be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0207 	bic.w	r2, r3, #7
 80026a4:	4923      	ldr	r1, [pc, #140]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ac:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e036      	b.n	800272c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	4918      	ldr	r1, [pc, #96]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4910      	ldr	r1, [pc, #64]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fc:	f000 f824 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCC_ClockConfig+0x1f0>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	490b      	ldr	r1, [pc, #44]	@ (800273c <HAL_RCC_ClockConfig+0x1f4>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <HAL_RCC_ClockConfig+0x1f8>)
 800271a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_ClockConfig+0x1fc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe ff89 	bl	8001638 <HAL_InitTick>
 8002726:	4603      	mov	r3, r0
 8002728:	72fb      	strb	r3, [r7, #11]

  return status;
 800272a:	7afb      	ldrb	r3, [r7, #11]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	08005b74 	.word	0x08005b74
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d121      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11e      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e004      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d134      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xa6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ec:	e005      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f0:	617b      	str	r3, [r7, #20]
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027f6:	617b      	str	r3, [r7, #20]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0e5b      	lsrs	r3, r3, #25
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	3301      	adds	r3, #1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	08005b8c 	.word	0x08005b8c
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08005b84 	.word	0x08005b84

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a8:	f7ff ffda 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08005b84 	.word	0x08005b84

080028d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e8:	f7ff f9ee 	bl	8001cc8 <HAL_PWREx_GetVoltageRange>
 80028ec:	6178      	str	r0, [r7, #20]
 80028ee:	e014      	b.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	4a24      	ldr	r2, [pc, #144]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fc:	4b22      	ldr	r3, [pc, #136]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002908:	f7ff f9de 	bl	8001cc8 <HAL_PWREx_GetVoltageRange>
 800290c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002920:	d10b      	bne.n	800293a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b80      	cmp	r3, #128	@ 0x80
 8002926:	d919      	bls.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2ba0      	cmp	r3, #160	@ 0xa0
 800292c:	d902      	bls.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800292e:	2302      	movs	r3, #2
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e013      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002934:	2301      	movs	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e010      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	@ 0x80
 800293e:	d902      	bls.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002940:	2303      	movs	r3, #3
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e00a      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b80      	cmp	r3, #128	@ 0x80
 800294a:	d102      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800294c:	2302      	movs	r3, #2
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e004      	b.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b70      	cmp	r3, #112	@ 0x70
 8002956:	d101      	bne.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002958:	2301      	movs	r3, #1
 800295a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 0207 	bic.w	r2, r3, #7
 8002964:	4909      	ldr	r1, [pc, #36]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002998:	2300      	movs	r3, #0
 800299a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800299c:	2300      	movs	r3, #0
 800299e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d041      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029b4:	d02a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029ba:	d824      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c6:	d81e      	bhi.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d0:	d010      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d2:	e018      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d4:	4b86      	ldr	r3, [pc, #536]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a85      	ldr	r2, [pc, #532]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e0:	e015      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fabb 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f2:	e00c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3320      	adds	r3, #32
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fba6 	bl	800314c <RCCEx_PLLSAI2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a04:	e003      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	74fb      	strb	r3, [r7, #19]
      break;
 8002a0a:	e000      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a14:	4b76      	ldr	r3, [pc, #472]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a22:	4973      	ldr	r1, [pc, #460]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d041      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a44:	d02a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a4a:	d824      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a56:	d81e      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d010      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a62:	e018      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a64:	4b62      	ldr	r3, [pc, #392]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a61      	ldr	r2, [pc, #388]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a70:	e015      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa73 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a82:	e00c      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3320      	adds	r3, #32
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fb5e 	bl	800314c <RCCEx_PLLSAI2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a94:	e003      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	74fb      	strb	r3, [r7, #19]
      break;
 8002a9a:	e000      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aa4:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ab2:	494f      	ldr	r1, [pc, #316]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002aba:	e001      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a0 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b41      	ldr	r3, [pc, #260]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a40      	ldr	r2, [pc, #256]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fde2 	bl	80016d8 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b16:	e009      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe fdde 	bl	80016d8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b2c:	4b31      	ldr	r3, [pc, #196]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d15c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01f      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d019      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b68:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	4a20      	ldr	r2, [pc, #128]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fd9d 	bl	80016d8 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	e00b      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fd99 	bl	80016d8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d902      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ec      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bde:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002be6:	e009      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfc:	7c7b      	ldrb	r3, [r7, #17]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b9e      	ldr	r3, [pc, #632]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	4a9d      	ldr	r2, [pc, #628]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1a:	4b98      	ldr	r3, [pc, #608]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c20:	f023 0203 	bic.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	4994      	ldr	r1, [pc, #592]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f023 020c 	bic.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	498c      	ldr	r1, [pc, #560]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5e:	4b87      	ldr	r3, [pc, #540]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	4983      	ldr	r1, [pc, #524]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c80:	4b7e      	ldr	r3, [pc, #504]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	497b      	ldr	r1, [pc, #492]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca2:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb0:	4972      	ldr	r1, [pc, #456]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	496a      	ldr	r1, [pc, #424]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	4961      	ldr	r1, [pc, #388]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d08:	4b5c      	ldr	r3, [pc, #368]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	4959      	ldr	r1, [pc, #356]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	4950      	ldr	r1, [pc, #320]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	4948      	ldr	r1, [pc, #288]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6e:	4b43      	ldr	r3, [pc, #268]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	493f      	ldr	r1, [pc, #252]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d028      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d90:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9e:	4937      	ldr	r1, [pc, #220]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dae:	d106      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dba:	60d3      	str	r3, [r2, #12]
 8002dbc:	e011      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f8c8 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d028      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dee:	4b23      	ldr	r3, [pc, #140]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfc:	491f      	ldr	r1, [pc, #124]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a1a      	ldr	r2, [pc, #104]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e18:	60d3      	str	r3, [r2, #12]
 8002e1a:	e011      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f899 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02b      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5a:	4908      	ldr	r1, [pc, #32]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a02      	ldr	r2, [pc, #8]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e76:	60d3      	str	r3, [r2, #12]
 8002e78:	e014      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f867 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02f      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ebe:	4928      	ldr	r1, [pc, #160]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ece:	d10d      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f844 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	74bb      	strb	r3, [r7, #18]
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3320      	adds	r3, #32
 8002efa:	2102      	movs	r1, #2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f925 	bl	800314c <RCCEx_PLLSAI2_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f1c:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f2a:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f4e:	4904      	ldr	r1, [pc, #16]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f72:	4b75      	ldr	r3, [pc, #468]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f7e:	4b72      	ldr	r3, [pc, #456]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10d      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
       ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f96:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d047      	beq.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e044      	b.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d018      	beq.n	8002fea <RCCEx_PLLSAI1_Config+0x86>
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d825      	bhi.n	8003008 <RCCEx_PLLSAI1_Config+0xa4>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <RCCEx_PLLSAI1_Config+0x62>
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d009      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x74>
 8002fc4:	e020      	b.n	8003008 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fc6:	4b60      	ldr	r3, [pc, #384]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11d      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd6:	e01a      	b.n	800300e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d116      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe8:	e013      	b.n	8003012 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fea:	4b57      	ldr	r3, [pc, #348]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ff6:	4b54      	ldr	r3, [pc, #336]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003006:	e006      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e004      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003016:	bf00      	nop
    }

    if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800301e:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	430b      	orrs	r3, r1
 8003034:	4944      	ldr	r1, [pc, #272]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d17d      	bne.n	800313c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003040:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a40      	ldr	r2, [pc, #256]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003046:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800304a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe fb44 	bl	80016d8 <HAL_GetTick>
 8003050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003052:	e009      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003054:	f7fe fb40 	bl	80016d8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d902      	bls.n	8003068 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	73fb      	strb	r3, [r7, #15]
        break;
 8003066:	e005      	b.n	8003074 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003068:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ef      	bne.n	8003054 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d160      	bne.n	800313c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003080:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	0211      	lsls	r1, r2, #8
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68d2      	ldr	r2, [r2, #12]
 8003096:	0912      	lsrs	r2, r2, #4
 8003098:	0452      	lsls	r2, r2, #17
 800309a:	430a      	orrs	r2, r1
 800309c:	492a      	ldr	r1, [pc, #168]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
 80030a2:	e027      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d112      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030aa:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80030b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	0211      	lsls	r1, r2, #8
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6912      	ldr	r2, [r2, #16]
 80030c0:	0852      	lsrs	r2, r2, #1
 80030c2:	3a01      	subs	r2, #1
 80030c4:	0552      	lsls	r2, r2, #21
 80030c6:	430a      	orrs	r2, r1
 80030c8:	491f      	ldr	r1, [pc, #124]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]
 80030ce:	e011      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6892      	ldr	r2, [r2, #8]
 80030e0:	0211      	lsls	r1, r2, #8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6952      	ldr	r2, [r2, #20]
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0652      	lsls	r2, r2, #25
 80030ec:	430a      	orrs	r2, r1
 80030ee:	4916      	ldr	r1, [pc, #88]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe faea 	bl	80016d8 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003106:	e009      	b.n	800311c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003108:	f7fe fae6 	bl	80016d8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	73fb      	strb	r3, [r7, #15]
          break;
 800311a:	e005      	b.n	8003128 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	4904      	ldr	r1, [pc, #16]	@ (8003148 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315a:	4b6a      	ldr	r3, [pc, #424]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d018      	beq.n	8003198 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003166:	4b67      	ldr	r3, [pc, #412]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0203 	and.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d10d      	bne.n	8003192 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
       ||
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800317e:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
       ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d047      	beq.n	8003222 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e044      	b.n	8003222 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d018      	beq.n	80031d2 <RCCEx_PLLSAI2_Config+0x86>
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d825      	bhi.n	80031f0 <RCCEx_PLLSAI2_Config+0xa4>
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d002      	beq.n	80031ae <RCCEx_PLLSAI2_Config+0x62>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d009      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x74>
 80031ac:	e020      	b.n	80031f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ae:	4b55      	ldr	r3, [pc, #340]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11d      	bne.n	80031f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e01a      	b.n	80031f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c0:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d116      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d0:	e013      	b.n	80031fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031de:	4b49      	ldr	r3, [pc, #292]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ee:	e006      	b.n	80031fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e004      	b.n	8003200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003206:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	430b      	orrs	r3, r1
 800321c:	4939      	ldr	r1, [pc, #228]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d167      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fe fa50 	bl	80016d8 <HAL_GetTick>
 8003238:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800323a:	e009      	b.n	8003250 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800323c:	f7fe fa4c 	bl	80016d8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d902      	bls.n	8003250 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	73fb      	strb	r3, [r7, #15]
        break;
 800324e:	e005      	b.n	800325c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003250:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ef      	bne.n	800323c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d14a      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003268:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6892      	ldr	r2, [r2, #8]
 8003278:	0211      	lsls	r1, r2, #8
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	0912      	lsrs	r2, r2, #4
 8003280:	0452      	lsls	r2, r2, #17
 8003282:	430a      	orrs	r2, r1
 8003284:	491f      	ldr	r1, [pc, #124]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	614b      	str	r3, [r1, #20]
 800328a:	e011      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003294:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6912      	ldr	r2, [r2, #16]
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0652      	lsls	r2, r2, #25
 80032a8:	430a      	orrs	r2, r1
 80032aa:	4916      	ldr	r1, [pc, #88]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fa0c 	bl	80016d8 <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c2:	e009      	b.n	80032d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c4:	f7fe fa08 	bl	80016d8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	73fb      	strb	r3, [r7, #15]
          break;
 80032d6:	e005      	b.n	80032e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ef      	beq.n	80032c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4904      	ldr	r1, [pc, #16]	@ (8003304 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e049      	b.n	80033ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe f82e 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 ff68 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e049      	b.n	800345c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fe f84b 	bl	8001478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4610      	mov	r0, r2
 80033f6:	f000 ff11 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x24>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e03c      	b.n	8003502 <HAL_TIM_PWM_Start+0x9e>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d109      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x3e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e02f      	b.n	8003502 <HAL_TIM_PWM_Start+0x9e>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x58>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start+0x9e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x72>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start+0x9e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x8c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start+0x9e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e09c      	b.n	8003644 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0xb6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003518:	e023      	b.n	8003562 <HAL_TIM_PWM_Start+0xfe>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xc6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003528:	e01b      	b.n	8003562 <HAL_TIM_PWM_Start+0xfe>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xd6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003538:	e013      	b.n	8003562 <HAL_TIM_PWM_Start+0xfe>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0xe6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003548:	e00b      	b.n	8003562 <HAL_TIM_PWM_Start+0xfe>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b10      	cmp	r3, #16
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0xf6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003558:	e003      	b.n	8003562 <HAL_TIM_PWM_Start+0xfe>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fc18 	bl	8004da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <HAL_TIM_PWM_Start+0x1e8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x13e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <HAL_TIM_PWM_Start+0x1ec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x13e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a32      	ldr	r2, [pc, #200]	@ (8003654 <HAL_TIM_PWM_Start+0x1f0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x13e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a31      	ldr	r2, [pc, #196]	@ (8003658 <HAL_TIM_PWM_Start+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x13e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <HAL_TIM_PWM_Start+0x1f8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_Start+0x142>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_PWM_Start+0x144>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <HAL_TIM_PWM_Start+0x1e8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01d      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d018      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a22      	ldr	r2, [pc, #136]	@ (8003660 <HAL_TIM_PWM_Start+0x1fc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a21      	ldr	r2, [pc, #132]	@ (8003664 <HAL_TIM_PWM_Start+0x200>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003668 <HAL_TIM_PWM_Start+0x204>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a17      	ldr	r2, [pc, #92]	@ (8003650 <HAL_TIM_PWM_Start+0x1ec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_PWM_Start+0x19e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a15      	ldr	r2, [pc, #84]	@ (8003654 <HAL_TIM_PWM_Start+0x1f0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d115      	bne.n	800362e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_TIM_PWM_Start+0x208>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d015      	beq.n	8003640 <HAL_TIM_PWM_Start+0x1dc>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361a:	d011      	beq.n	8003640 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	e008      	b.n	8003640 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e000      	b.n	8003642 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40013400 	.word	0x40013400
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	00010007 	.word	0x00010007

08003670 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e049      	b.n	8003716 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f841 	bl	800371e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 fdb4 	bl	800421c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0x1e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e023      	b.n	800379a <HAL_TIM_IC_Start_IT+0x66>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0x2e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e01b      	b.n	800379a <HAL_TIM_IC_Start_IT+0x66>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0x3e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e013      	b.n	800379a <HAL_TIM_IC_Start_IT+0x66>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b0c      	cmp	r3, #12
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_IT+0x4e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e00b      	b.n	800379a <HAL_TIM_IC_Start_IT+0x66>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b10      	cmp	r3, #16
 8003786:	d104      	bne.n	8003792 <HAL_TIM_IC_Start_IT+0x5e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e003      	b.n	800379a <HAL_TIM_IC_Start_IT+0x66>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003798:	b2db      	uxtb	r3, r3
 800379a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_IC_Start_IT+0x78>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e013      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0xa0>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d104      	bne.n	80037bc <HAL_TIM_IC_Start_IT+0x88>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e00b      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0xa0>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d104      	bne.n	80037cc <HAL_TIM_IC_Start_IT+0x98>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e003      	b.n	80037d4 <HAL_TIM_IC_Start_IT+0xa0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d102      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037dc:	7b7b      	ldrb	r3, [r7, #13]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0dd      	b.n	80039a2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0xc2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f4:	e023      	b.n	800383e <HAL_TIM_IC_Start_IT+0x10a>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_IC_Start_IT+0xd2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003804:	e01b      	b.n	800383e <HAL_TIM_IC_Start_IT+0x10a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d104      	bne.n	8003816 <HAL_TIM_IC_Start_IT+0xe2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	e013      	b.n	800383e <HAL_TIM_IC_Start_IT+0x10a>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b0c      	cmp	r3, #12
 800381a:	d104      	bne.n	8003826 <HAL_TIM_IC_Start_IT+0xf2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003824:	e00b      	b.n	800383e <HAL_TIM_IC_Start_IT+0x10a>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b10      	cmp	r3, #16
 800382a:	d104      	bne.n	8003836 <HAL_TIM_IC_Start_IT+0x102>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003834:	e003      	b.n	800383e <HAL_TIM_IC_Start_IT+0x10a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_TIM_IC_Start_IT+0x11a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800384c:	e013      	b.n	8003876 <HAL_TIM_IC_Start_IT+0x142>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d104      	bne.n	800385e <HAL_TIM_IC_Start_IT+0x12a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800385c:	e00b      	b.n	8003876 <HAL_TIM_IC_Start_IT+0x142>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d104      	bne.n	800386e <HAL_TIM_IC_Start_IT+0x13a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800386c:	e003      	b.n	8003876 <HAL_TIM_IC_Start_IT+0x142>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d841      	bhi.n	8003900 <HAL_TIM_IC_Start_IT+0x1cc>
 800387c:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <HAL_TIM_IC_Start_IT+0x150>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038b9 	.word	0x080038b9
 8003888:	08003901 	.word	0x08003901
 800388c:	08003901 	.word	0x08003901
 8003890:	08003901 	.word	0x08003901
 8003894:	080038cb 	.word	0x080038cb
 8003898:	08003901 	.word	0x08003901
 800389c:	08003901 	.word	0x08003901
 80038a0:	08003901 	.word	0x08003901
 80038a4:	080038dd 	.word	0x080038dd
 80038a8:	08003901 	.word	0x08003901
 80038ac:	08003901 	.word	0x08003901
 80038b0:	08003901 	.word	0x08003901
 80038b4:	080038ef 	.word	0x080038ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0202 	orr.w	r2, r2, #2
 80038c6:	60da      	str	r2, [r3, #12]
      break;
 80038c8:	e01d      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0204 	orr.w	r2, r2, #4
 80038d8:	60da      	str	r2, [r3, #12]
      break;
 80038da:	e014      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	60da      	str	r2, [r3, #12]
      break;
 80038ec:	e00b      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0210 	orr.w	r2, r2, #16
 80038fc:	60da      	str	r2, [r3, #12]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	bf00      	nop
  }

  if (status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d149      	bne.n	80039a0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2201      	movs	r2, #1
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fa43 	bl	8004da0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a23      	ldr	r2, [pc, #140]	@ (80039ac <HAL_TIM_IC_Start_IT+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01d      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392c:	d018      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <HAL_TIM_IC_Start_IT+0x27c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <HAL_TIM_IC_Start_IT+0x280>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <HAL_TIM_IC_Start_IT+0x284>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <HAL_TIM_IC_Start_IT+0x288>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <HAL_TIM_IC_Start_IT+0x28c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d115      	bne.n	800398c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <HAL_TIM_IC_Start_IT+0x290>)
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d015      	beq.n	800399e <HAL_TIM_IC_Start_IT+0x26a>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d011      	beq.n	800399e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	e008      	b.n	800399e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e000      	b.n	80039a0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40014000 	.word	0x40014000
 80039c4:	00010007 	.word	0x00010007

080039c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d020      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0202 	mvn.w	r2, #2
 80039fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f982 	bl	8000d1c <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fbe0 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fbe7 	bl	80041f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d020      	beq.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0204 	mvn.w	r2, #4
 8003a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd f95c 	bl	8000d1c <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fbba 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fbc1 	bl	80041f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d020      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0208 	mvn.w	r2, #8
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd f936 	bl	8000d1c <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb94 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb9b 	bl	80041f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0210 	mvn.w	r2, #16
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd f910 	bl	8000d1c <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fb6e 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb75 	bl	80041f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0201 	mvn.w	r2, #1
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb4c 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 f9dc 	bl	8004f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 f9d4 	bl	8004f24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fb34 	bl	8004208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0220 	mvn.w	r2, #32
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f001 f99c 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_IC_ConfigChannel+0x1e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e088      	b.n	8003cfc <HAL_TIM_IC_ConfigChannel+0x130>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c08:	f000 ff0c 	bl	8004a24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 020c 	bic.w	r2, r2, #12
 8003c1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]
 8003c2e:	e060      	b.n	8003cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d11c      	bne.n	8003c70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c46:	f000 ff8a 	bl	8004b5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6999      	ldr	r1, [r3, #24]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	619a      	str	r2, [r3, #24]
 8003c6e:	e040      	b.n	8003cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d11b      	bne.n	8003cae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c86:	f000 ffd7 	bl	8004c38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 020c 	bic.w	r2, r2, #12
 8003c98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
 8003cac:	e021      	b.n	8003cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d11c      	bne.n	8003cee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003cc4:	f000 fff4 	bl	8004cb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69d9      	ldr	r1, [r3, #28]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
 8003cec:	e001      	b.n	8003cf2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0ff      	b.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b14      	cmp	r3, #20
 8003d2e:	f200 80f0 	bhi.w	8003f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003f13 	.word	0x08003f13
 8003d40:	08003f13 	.word	0x08003f13
 8003d44:	08003f13 	.word	0x08003f13
 8003d48:	08003dcd 	.word	0x08003dcd
 8003d4c:	08003f13 	.word	0x08003f13
 8003d50:	08003f13 	.word	0x08003f13
 8003d54:	08003f13 	.word	0x08003f13
 8003d58:	08003e0f 	.word	0x08003e0f
 8003d5c:	08003f13 	.word	0x08003f13
 8003d60:	08003f13 	.word	0x08003f13
 8003d64:	08003f13 	.word	0x08003f13
 8003d68:	08003e4f 	.word	0x08003e4f
 8003d6c:	08003f13 	.word	0x08003f13
 8003d70:	08003f13 	.word	0x08003f13
 8003d74:	08003f13 	.word	0x08003f13
 8003d78:	08003e91 	.word	0x08003e91
 8003d7c:	08003f13 	.word	0x08003f13
 8003d80:	08003f13 	.word	0x08003f13
 8003d84:	08003f13 	.word	0x08003f13
 8003d88:	08003ed1 	.word	0x08003ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fadc 	bl	8004350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0208 	orr.w	r2, r2, #8
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	619a      	str	r2, [r3, #24]
      break;
 8003dca:	e0a5      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb4c 	bl	8004470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	619a      	str	r2, [r3, #24]
      break;
 8003e0c:	e084      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fbb5 	bl	8004584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0204 	bic.w	r2, r2, #4
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	61da      	str	r2, [r3, #28]
      break;
 8003e4c:	e064      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fc1d 	bl	8004694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	021a      	lsls	r2, r3, #8
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]
      break;
 8003e8e:	e043      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fc66 	bl	8004768 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ece:	e023      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fcaa 	bl	8004830 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f10:	e002      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
      break;
 8003f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_ConfigClockSource+0x1c>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0b6      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f84:	d03e      	beq.n	8004004 <HAL_TIM_ConfigClockSource+0xd8>
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8a:	f200 8087 	bhi.w	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f92:	f000 8086 	beq.w	80040a2 <HAL_TIM_ConfigClockSource+0x176>
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9a:	d87f      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003f9c:	2b70      	cmp	r3, #112	@ 0x70
 8003f9e:	d01a      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0xaa>
 8003fa0:	2b70      	cmp	r3, #112	@ 0x70
 8003fa2:	d87b      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fa4:	2b60      	cmp	r3, #96	@ 0x60
 8003fa6:	d050      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x11e>
 8003fa8:	2b60      	cmp	r3, #96	@ 0x60
 8003faa:	d877      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fac:	2b50      	cmp	r3, #80	@ 0x50
 8003fae:	d03c      	beq.n	800402a <HAL_TIM_ConfigClockSource+0xfe>
 8003fb0:	2b50      	cmp	r3, #80	@ 0x50
 8003fb2:	d873      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d058      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x13e>
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d86f      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fbc:	2b30      	cmp	r3, #48	@ 0x30
 8003fbe:	d064      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x15e>
 8003fc0:	2b30      	cmp	r3, #48	@ 0x30
 8003fc2:	d86b      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d060      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x15e>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d867      	bhi.n	800409c <HAL_TIM_ConfigClockSource+0x170>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05c      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x15e>
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d05a      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x15e>
 8003fd4:	e062      	b.n	800409c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	f000 febb 	bl	8004d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	609a      	str	r2, [r3, #8]
      break;
 8004002:	e04f      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	f000 fea4 	bl	8004d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004026:	609a      	str	r2, [r3, #8]
      break;
 8004028:	e03c      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	461a      	mov	r2, r3
 8004038:	f000 fd62 	bl	8004b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2150      	movs	r1, #80	@ 0x50
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe71 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 8004048:	e02c      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fdbe 	bl	8004bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2160      	movs	r1, #96	@ 0x60
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fe61 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 8004068:	e01c      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fd42 	bl	8004b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2140      	movs	r1, #64	@ 0x40
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fe51 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 8004088:	e00c      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f000 fe48 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800409a:	e003      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e000      	b.n	80040a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e031      	b.n	800413a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fc07 	bl	80048fc <TIM_SlaveTimer_SetConfig>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e018      	b.n	800413a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004116:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004126:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d831      	bhi.n	80041bc <HAL_TIM_ReadCapturedValue+0x78>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <HAL_TIM_ReadCapturedValue+0x1c>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004195 	.word	0x08004195
 8004164:	080041bd 	.word	0x080041bd
 8004168:	080041bd 	.word	0x080041bd
 800416c:	080041bd 	.word	0x080041bd
 8004170:	0800419f 	.word	0x0800419f
 8004174:	080041bd 	.word	0x080041bd
 8004178:	080041bd 	.word	0x080041bd
 800417c:	080041bd 	.word	0x080041bd
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041bd 	.word	0x080041bd
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041b3 	.word	0x080041b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	60fb      	str	r3, [r7, #12]

      break;
 800419c:	e00f      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	60fb      	str	r3, [r7, #12]

      break;
 80041a6:	e00a      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	60fb      	str	r3, [r7, #12]

      break;
 80041b0:	e005      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	60fb      	str	r3, [r7, #12]

      break;
 80041ba:	e000      	b.n	80041be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80041bc:	bf00      	nop
  }

  return tmpreg;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a40      	ldr	r2, [pc, #256]	@ (8004330 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3d      	ldr	r2, [pc, #244]	@ (8004334 <TIM_Base_SetConfig+0x118>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a3c      	ldr	r2, [pc, #240]	@ (8004338 <TIM_Base_SetConfig+0x11c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <TIM_Base_SetConfig+0x120>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3a      	ldr	r2, [pc, #232]	@ (8004340 <TIM_Base_SetConfig+0x124>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2f      	ldr	r2, [pc, #188]	@ (8004330 <TIM_Base_SetConfig+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427c:	d01b      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <TIM_Base_SetConfig+0x118>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d017      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <TIM_Base_SetConfig+0x11c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2a      	ldr	r2, [pc, #168]	@ (800433c <TIM_Base_SetConfig+0x120>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00f      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a29      	ldr	r2, [pc, #164]	@ (8004340 <TIM_Base_SetConfig+0x124>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00b      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a28      	ldr	r2, [pc, #160]	@ (8004344 <TIM_Base_SetConfig+0x128>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d007      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a27      	ldr	r2, [pc, #156]	@ (8004348 <TIM_Base_SetConfig+0x12c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a26      	ldr	r2, [pc, #152]	@ (800434c <TIM_Base_SetConfig+0x130>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	@ (8004330 <TIM_Base_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00f      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <TIM_Base_SetConfig+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <TIM_Base_SetConfig+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a10      	ldr	r2, [pc, #64]	@ (8004348 <TIM_Base_SetConfig+0x12c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0f      	ldr	r2, [pc, #60]	@ (800434c <TIM_Base_SetConfig+0x130>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800

08004350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0201 	bic.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0302 	bic.w	r3, r3, #2
 800439c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	@ (800445c <TIM_OC1_SetConfig+0x10c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00f      	beq.n	80043d0 <TIM_OC1_SetConfig+0x80>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <TIM_OC1_SetConfig+0x110>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_OC1_SetConfig+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004464 <TIM_OC1_SetConfig+0x114>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_OC1_SetConfig+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a29      	ldr	r2, [pc, #164]	@ (8004468 <TIM_OC1_SetConfig+0x118>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC1_SetConfig+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a28      	ldr	r2, [pc, #160]	@ (800446c <TIM_OC1_SetConfig+0x11c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <TIM_OC1_SetConfig+0x10c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <TIM_OC1_SetConfig+0xc2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <TIM_OC1_SetConfig+0x110>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <TIM_OC1_SetConfig+0xc2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a19      	ldr	r2, [pc, #100]	@ (8004464 <TIM_OC1_SetConfig+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_OC1_SetConfig+0xc2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a18      	ldr	r2, [pc, #96]	@ (8004468 <TIM_OC1_SetConfig+0x118>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_OC1_SetConfig+0xc2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a17      	ldr	r2, [pc, #92]	@ (800446c <TIM_OC1_SetConfig+0x11c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d111      	bne.n	8004436 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	621a      	str	r2, [r3, #32]
}
 8004450:	bf00      	nop
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40013400 	.word	0x40013400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800

08004470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f023 0210 	bic.w	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <TIM_OC2_SetConfig+0x100>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC2_SetConfig+0x6c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a27      	ldr	r2, [pc, #156]	@ (8004574 <TIM_OC2_SetConfig+0x104>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10d      	bne.n	80044f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <TIM_OC2_SetConfig+0x100>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00f      	beq.n	8004520 <TIM_OC2_SetConfig+0xb0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1c      	ldr	r2, [pc, #112]	@ (8004574 <TIM_OC2_SetConfig+0x104>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_OC2_SetConfig+0xb0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <TIM_OC2_SetConfig+0x108>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_OC2_SetConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <TIM_OC2_SetConfig+0x10c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_OC2_SetConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <TIM_OC2_SetConfig+0x110>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d113      	bne.n	8004548 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a27      	ldr	r2, [pc, #156]	@ (8004680 <TIM_OC3_SetConfig+0xfc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC3_SetConfig+0x6a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a26      	ldr	r2, [pc, #152]	@ (8004684 <TIM_OC3_SetConfig+0x100>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10d      	bne.n	800460a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <TIM_OC3_SetConfig+0xfc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00f      	beq.n	8004632 <TIM_OC3_SetConfig+0xae>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1b      	ldr	r2, [pc, #108]	@ (8004684 <TIM_OC3_SetConfig+0x100>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <TIM_OC3_SetConfig+0xae>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1a      	ldr	r2, [pc, #104]	@ (8004688 <TIM_OC3_SetConfig+0x104>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <TIM_OC3_SetConfig+0xae>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a19      	ldr	r2, [pc, #100]	@ (800468c <TIM_OC3_SetConfig+0x108>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <TIM_OC3_SetConfig+0xae>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a18      	ldr	r2, [pc, #96]	@ (8004690 <TIM_OC3_SetConfig+0x10c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d113      	bne.n	800465a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	621a      	str	r2, [r3, #32]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	40014400 	.word	0x40014400
 8004690:	40014800 	.word	0x40014800

08004694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	031b      	lsls	r3, r3, #12
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <TIM_OC4_SetConfig+0xc0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00f      	beq.n	8004718 <TIM_OC4_SetConfig+0x84>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <TIM_OC4_SetConfig+0xc4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_OC4_SetConfig+0x84>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a16      	ldr	r2, [pc, #88]	@ (800475c <TIM_OC4_SetConfig+0xc8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_OC4_SetConfig+0x84>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <TIM_OC4_SetConfig+0xcc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_OC4_SetConfig+0x84>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a14      	ldr	r2, [pc, #80]	@ (8004764 <TIM_OC4_SetConfig+0xd0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d109      	bne.n	800472c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800471e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	019b      	lsls	r3, r3, #6
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40013400 	.word	0x40013400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a17      	ldr	r2, [pc, #92]	@ (800481c <TIM_OC5_SetConfig+0xb4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00f      	beq.n	80047e2 <TIM_OC5_SetConfig+0x7a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a16      	ldr	r2, [pc, #88]	@ (8004820 <TIM_OC5_SetConfig+0xb8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00b      	beq.n	80047e2 <TIM_OC5_SetConfig+0x7a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a15      	ldr	r2, [pc, #84]	@ (8004824 <TIM_OC5_SetConfig+0xbc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_OC5_SetConfig+0x7a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <TIM_OC5_SetConfig+0xc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_OC5_SetConfig+0x7a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a13      	ldr	r2, [pc, #76]	@ (800482c <TIM_OC5_SetConfig+0xc4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d109      	bne.n	80047f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	051b      	lsls	r3, r3, #20
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <TIM_OC6_SetConfig+0xb8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00f      	beq.n	80048ac <TIM_OC6_SetConfig+0x7c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <TIM_OC6_SetConfig+0xbc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00b      	beq.n	80048ac <TIM_OC6_SetConfig+0x7c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <TIM_OC6_SetConfig+0xc0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <TIM_OC6_SetConfig+0x7c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <TIM_OC6_SetConfig+0xc4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_OC6_SetConfig+0x7c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <TIM_OC6_SetConfig+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d109      	bne.n	80048c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	029b      	lsls	r3, r3, #10
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40013400 	.word	0x40013400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800

080048fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004918:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	f023 0307 	bic.w	r3, r3, #7
 800492e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b70      	cmp	r3, #112	@ 0x70
 8004948:	d01a      	beq.n	8004980 <TIM_SlaveTimer_SetConfig+0x84>
 800494a:	2b70      	cmp	r3, #112	@ 0x70
 800494c:	d860      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 800494e:	2b60      	cmp	r3, #96	@ 0x60
 8004950:	d054      	beq.n	80049fc <TIM_SlaveTimer_SetConfig+0x100>
 8004952:	2b60      	cmp	r3, #96	@ 0x60
 8004954:	d85c      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 8004956:	2b50      	cmp	r3, #80	@ 0x50
 8004958:	d046      	beq.n	80049e8 <TIM_SlaveTimer_SetConfig+0xec>
 800495a:	2b50      	cmp	r3, #80	@ 0x50
 800495c:	d858      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 800495e:	2b40      	cmp	r3, #64	@ 0x40
 8004960:	d019      	beq.n	8004996 <TIM_SlaveTimer_SetConfig+0x9a>
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d854      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 8004966:	2b30      	cmp	r3, #48	@ 0x30
 8004968:	d055      	beq.n	8004a16 <TIM_SlaveTimer_SetConfig+0x11a>
 800496a:	2b30      	cmp	r3, #48	@ 0x30
 800496c:	d850      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d051      	beq.n	8004a16 <TIM_SlaveTimer_SetConfig+0x11a>
 8004972:	2b20      	cmp	r3, #32
 8004974:	d84c      	bhi.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04d      	beq.n	8004a16 <TIM_SlaveTimer_SetConfig+0x11a>
 800497a:	2b10      	cmp	r3, #16
 800497c:	d04b      	beq.n	8004a16 <TIM_SlaveTimer_SetConfig+0x11a>
 800497e:	e047      	b.n	8004a10 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004990:	f000 f9e6 	bl	8004d60 <TIM_ETR_SetConfig>
      break;
 8004994:	e040      	b.n	8004a18 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d101      	bne.n	80049a2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e03b      	b.n	8004a1a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
      break;
 80049e6:	e017      	b.n	8004a18 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f4:	461a      	mov	r2, r3
 80049f6:	f000 f883 	bl	8004b00 <TIM_TI1_ConfigInputStage>
      break;
 80049fa:	e00d      	b.n	8004a18 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a08:	461a      	mov	r2, r3
 8004a0a:	f000 f8e5 	bl	8004bd8 <TIM_TI2_ConfigInputStage>
      break;
 8004a0e:	e003      	b.n	8004a18 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	75fb      	strb	r3, [r7, #23]
      break;
 8004a14:	e000      	b.n	8004a18 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004a16:	bf00      	nop
  }

  return status;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0201 	bic.w	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <TIM_TI1_SetConfig+0xc4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d017      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a58:	d013      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <TIM_TI1_SetConfig+0xc8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00f      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <TIM_TI1_SetConfig+0xcc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <TIM_TI1_SetConfig+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a20      	ldr	r2, [pc, #128]	@ (8004af8 <TIM_TI1_SetConfig+0xd4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_TI1_SetConfig+0x5e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <TIM_TI1_SetConfig+0xd8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <TIM_TI1_SetConfig+0x62>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <TIM_TI1_SetConfig+0x64>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e003      	b.n	8004aa6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f023 030a 	bic.w	r3, r3, #10
 8004ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 030a 	and.w	r3, r3, #10
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000

08004b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 030a 	bic.w	r3, r3, #10
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b087      	sub	sp, #28
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0210 	bic.w	r2, r3, #16
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	031b      	lsls	r3, r3, #12
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0303 	bic.w	r3, r3, #3
 8004c64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	031b      	lsls	r3, r3, #12
 8004d08:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f043 0307 	orr.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2201      	movs	r2, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e068      	b.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d018      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a13      	ldr	r2, [pc, #76]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a14      	ldr	r2, [pc, #80]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40014000 	.word	0x40014000

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e040      	b.n	8004fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fb ff24 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2224      	movs	r2, #36	@ 0x24
 8004f64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fbaa 	bl	80056d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8ef 	bl	8005168 <UART_SetConfig>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e01b      	b.n	8004fcc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fc29 	bl	800581c <UART_CheckIdleState>
 8004fca:	4603      	mov	r3, r0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	f040 80b6 	bne.w	800515c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_UART_Receive+0x28>
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0ae      	b.n	800515e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2222      	movs	r2, #34	@ 0x22
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005016:	f7fc fb5f 	bl	80016d8 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005034:	d10e      	bne.n	8005054 <HAL_UART_Receive+0x80>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <HAL_UART_Receive+0x76>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005044:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005048:	e02d      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005052:	e028      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <HAL_UART_Receive+0xa4>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_UART_Receive+0x9a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	22ff      	movs	r2, #255	@ 0xff
 8005068:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800506c:	e01b      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	227f      	movs	r2, #127	@ 0x7f
 8005072:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005076:	e016      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005080:	d10d      	bne.n	800509e <HAL_UART_Receive+0xca>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_UART_Receive+0xc0>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	227f      	movs	r2, #127	@ 0x7f
 800508e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005092:	e008      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	223f      	movs	r2, #63	@ 0x3f
 8005098:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800509c:	e003      	b.n	80050a6 <HAL_UART_Receive+0xd2>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b6:	d108      	bne.n	80050ca <HAL_UART_Receive+0xf6>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	e003      	b.n	80050d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050d2:	e037      	b.n	8005144 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	2120      	movs	r1, #32
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fc44 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e033      	b.n	800515e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10c      	bne.n	8005116 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005102:	b29a      	uxth	r2, r3
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	4013      	ands	r3, r2
 8005108:	b29a      	uxth	r2, r3
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	3302      	adds	r3, #2
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e00d      	b.n	8005132 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800511c:	b29b      	uxth	r3, r3
 800511e:	b2da      	uxtb	r2, r3
 8005120:	8a7b      	ldrh	r3, [r7, #18]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4013      	ands	r3, r2
 8005126:	b2da      	uxtb	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1c1      	bne.n	80050d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b08a      	sub	sp, #40	@ 0x28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4ba4      	ldr	r3, [pc, #656]	@ (8005428 <UART_SetConfig+0x2c0>)
 8005198:	4013      	ands	r3, r2
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a99      	ldr	r2, [pc, #612]	@ (800542c <UART_SetConfig+0x2c4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d0:	4313      	orrs	r3, r2
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e4:	430a      	orrs	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a90      	ldr	r2, [pc, #576]	@ (8005430 <UART_SetConfig+0x2c8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d126      	bne.n	8005240 <UART_SetConfig+0xd8>
 80051f2:	4b90      	ldr	r3, [pc, #576]	@ (8005434 <UART_SetConfig+0x2cc>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d81b      	bhi.n	8005238 <UART_SetConfig+0xd0>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <UART_SetConfig+0xa0>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	08005219 	.word	0x08005219
 800520c:	08005229 	.word	0x08005229
 8005210:	08005221 	.word	0x08005221
 8005214:	08005231 	.word	0x08005231
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521e:	e116      	b.n	800544e <UART_SetConfig+0x2e6>
 8005220:	2302      	movs	r3, #2
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005226:	e112      	b.n	800544e <UART_SetConfig+0x2e6>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522e:	e10e      	b.n	800544e <UART_SetConfig+0x2e6>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005236:	e10a      	b.n	800544e <UART_SetConfig+0x2e6>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523e:	e106      	b.n	800544e <UART_SetConfig+0x2e6>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a7c      	ldr	r2, [pc, #496]	@ (8005438 <UART_SetConfig+0x2d0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d138      	bne.n	80052bc <UART_SetConfig+0x154>
 800524a:	4b7a      	ldr	r3, [pc, #488]	@ (8005434 <UART_SetConfig+0x2cc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d82d      	bhi.n	80052b4 <UART_SetConfig+0x14c>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0xf8>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005295 	.word	0x08005295
 8005264:	080052b5 	.word	0x080052b5
 8005268:	080052b5 	.word	0x080052b5
 800526c:	080052b5 	.word	0x080052b5
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052b5 	.word	0x080052b5
 8005278:	080052b5 	.word	0x080052b5
 800527c:	080052b5 	.word	0x080052b5
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052b5 	.word	0x080052b5
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052ad 	.word	0x080052ad
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e0d8      	b.n	800544e <UART_SetConfig+0x2e6>
 800529c:	2302      	movs	r3, #2
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a2:	e0d4      	b.n	800544e <UART_SetConfig+0x2e6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052aa:	e0d0      	b.n	800544e <UART_SetConfig+0x2e6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b2:	e0cc      	b.n	800544e <UART_SetConfig+0x2e6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ba:	e0c8      	b.n	800544e <UART_SetConfig+0x2e6>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5e      	ldr	r2, [pc, #376]	@ (800543c <UART_SetConfig+0x2d4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d125      	bne.n	8005312 <UART_SetConfig+0x1aa>
 80052c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005434 <UART_SetConfig+0x2cc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052d0:	2b30      	cmp	r3, #48	@ 0x30
 80052d2:	d016      	beq.n	8005302 <UART_SetConfig+0x19a>
 80052d4:	2b30      	cmp	r3, #48	@ 0x30
 80052d6:	d818      	bhi.n	800530a <UART_SetConfig+0x1a2>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d00a      	beq.n	80052f2 <UART_SetConfig+0x18a>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d814      	bhi.n	800530a <UART_SetConfig+0x1a2>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <UART_SetConfig+0x182>
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d008      	beq.n	80052fa <UART_SetConfig+0x192>
 80052e8:	e00f      	b.n	800530a <UART_SetConfig+0x1a2>
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f0:	e0ad      	b.n	800544e <UART_SetConfig+0x2e6>
 80052f2:	2302      	movs	r3, #2
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f8:	e0a9      	b.n	800544e <UART_SetConfig+0x2e6>
 80052fa:	2304      	movs	r3, #4
 80052fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005300:	e0a5      	b.n	800544e <UART_SetConfig+0x2e6>
 8005302:	2308      	movs	r3, #8
 8005304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005308:	e0a1      	b.n	800544e <UART_SetConfig+0x2e6>
 800530a:	2310      	movs	r3, #16
 800530c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005310:	e09d      	b.n	800544e <UART_SetConfig+0x2e6>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a4a      	ldr	r2, [pc, #296]	@ (8005440 <UART_SetConfig+0x2d8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d125      	bne.n	8005368 <UART_SetConfig+0x200>
 800531c:	4b45      	ldr	r3, [pc, #276]	@ (8005434 <UART_SetConfig+0x2cc>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005326:	2bc0      	cmp	r3, #192	@ 0xc0
 8005328:	d016      	beq.n	8005358 <UART_SetConfig+0x1f0>
 800532a:	2bc0      	cmp	r3, #192	@ 0xc0
 800532c:	d818      	bhi.n	8005360 <UART_SetConfig+0x1f8>
 800532e:	2b80      	cmp	r3, #128	@ 0x80
 8005330:	d00a      	beq.n	8005348 <UART_SetConfig+0x1e0>
 8005332:	2b80      	cmp	r3, #128	@ 0x80
 8005334:	d814      	bhi.n	8005360 <UART_SetConfig+0x1f8>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <UART_SetConfig+0x1d8>
 800533a:	2b40      	cmp	r3, #64	@ 0x40
 800533c:	d008      	beq.n	8005350 <UART_SetConfig+0x1e8>
 800533e:	e00f      	b.n	8005360 <UART_SetConfig+0x1f8>
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005346:	e082      	b.n	800544e <UART_SetConfig+0x2e6>
 8005348:	2302      	movs	r3, #2
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534e:	e07e      	b.n	800544e <UART_SetConfig+0x2e6>
 8005350:	2304      	movs	r3, #4
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005356:	e07a      	b.n	800544e <UART_SetConfig+0x2e6>
 8005358:	2308      	movs	r3, #8
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535e:	e076      	b.n	800544e <UART_SetConfig+0x2e6>
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005366:	e072      	b.n	800544e <UART_SetConfig+0x2e6>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <UART_SetConfig+0x2dc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d12a      	bne.n	80053c8 <UART_SetConfig+0x260>
 8005372:	4b30      	ldr	r3, [pc, #192]	@ (8005434 <UART_SetConfig+0x2cc>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800537c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005380:	d01a      	beq.n	80053b8 <UART_SetConfig+0x250>
 8005382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005386:	d81b      	bhi.n	80053c0 <UART_SetConfig+0x258>
 8005388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800538c:	d00c      	beq.n	80053a8 <UART_SetConfig+0x240>
 800538e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005392:	d815      	bhi.n	80053c0 <UART_SetConfig+0x258>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <UART_SetConfig+0x238>
 8005398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800539c:	d008      	beq.n	80053b0 <UART_SetConfig+0x248>
 800539e:	e00f      	b.n	80053c0 <UART_SetConfig+0x258>
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a6:	e052      	b.n	800544e <UART_SetConfig+0x2e6>
 80053a8:	2302      	movs	r3, #2
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e04e      	b.n	800544e <UART_SetConfig+0x2e6>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e04a      	b.n	800544e <UART_SetConfig+0x2e6>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e046      	b.n	800544e <UART_SetConfig+0x2e6>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c6:	e042      	b.n	800544e <UART_SetConfig+0x2e6>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	@ (800542c <UART_SetConfig+0x2c4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d13a      	bne.n	8005448 <UART_SetConfig+0x2e0>
 80053d2:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <UART_SetConfig+0x2cc>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053e0:	d01a      	beq.n	8005418 <UART_SetConfig+0x2b0>
 80053e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053e6:	d81b      	bhi.n	8005420 <UART_SetConfig+0x2b8>
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ec:	d00c      	beq.n	8005408 <UART_SetConfig+0x2a0>
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f2:	d815      	bhi.n	8005420 <UART_SetConfig+0x2b8>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <UART_SetConfig+0x298>
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fc:	d008      	beq.n	8005410 <UART_SetConfig+0x2a8>
 80053fe:	e00f      	b.n	8005420 <UART_SetConfig+0x2b8>
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005406:	e022      	b.n	800544e <UART_SetConfig+0x2e6>
 8005408:	2302      	movs	r3, #2
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540e:	e01e      	b.n	800544e <UART_SetConfig+0x2e6>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005416:	e01a      	b.n	800544e <UART_SetConfig+0x2e6>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541e:	e016      	b.n	800544e <UART_SetConfig+0x2e6>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005426:	e012      	b.n	800544e <UART_SetConfig+0x2e6>
 8005428:	efff69f3 	.word	0xefff69f3
 800542c:	40008000 	.word	0x40008000
 8005430:	40013800 	.word	0x40013800
 8005434:	40021000 	.word	0x40021000
 8005438:	40004400 	.word	0x40004400
 800543c:	40004800 	.word	0x40004800
 8005440:	40004c00 	.word	0x40004c00
 8005444:	40005000 	.word	0x40005000
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a9f      	ldr	r2, [pc, #636]	@ (80056d0 <UART_SetConfig+0x568>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d17a      	bne.n	800554e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005458:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800545c:	2b08      	cmp	r3, #8
 800545e:	d824      	bhi.n	80054aa <UART_SetConfig+0x342>
 8005460:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <UART_SetConfig+0x300>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800548d 	.word	0x0800548d
 800546c:	080054ab 	.word	0x080054ab
 8005470:	08005495 	.word	0x08005495
 8005474:	080054ab 	.word	0x080054ab
 8005478:	0800549b 	.word	0x0800549b
 800547c:	080054ab 	.word	0x080054ab
 8005480:	080054ab 	.word	0x080054ab
 8005484:	080054ab 	.word	0x080054ab
 8005488:	080054a3 	.word	0x080054a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7fd f9f4 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8005490:	61f8      	str	r0, [r7, #28]
        break;
 8005492:	e010      	b.n	80054b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005494:	4b8f      	ldr	r3, [pc, #572]	@ (80056d4 <UART_SetConfig+0x56c>)
 8005496:	61fb      	str	r3, [r7, #28]
        break;
 8005498:	e00d      	b.n	80054b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549a:	f7fd f955 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 800549e:	61f8      	str	r0, [r7, #28]
        break;
 80054a0:	e009      	b.n	80054b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a6:	61fb      	str	r3, [r7, #28]
        break;
 80054a8:	e005      	b.n	80054b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 80fb 	beq.w	80056b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d305      	bcc.n	80054da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d903      	bls.n	80054e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054e0:	e0e8      	b.n	80056b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2200      	movs	r2, #0
 80054e6:	461c      	mov	r4, r3
 80054e8:	4615      	mov	r5, r2
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	022b      	lsls	r3, r5, #8
 80054f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054f8:	0222      	lsls	r2, r4, #8
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6849      	ldr	r1, [r1, #4]
 80054fe:	0849      	lsrs	r1, r1, #1
 8005500:	2000      	movs	r0, #0
 8005502:	4688      	mov	r8, r1
 8005504:	4681      	mov	r9, r0
 8005506:	eb12 0a08 	adds.w	sl, r2, r8
 800550a:	eb43 0b09 	adc.w	fp, r3, r9
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	4650      	mov	r0, sl
 800551e:	4659      	mov	r1, fp
 8005520:	f7fa fe52 	bl	80001c8 <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4613      	mov	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005532:	d308      	bcc.n	8005546 <UART_SetConfig+0x3de>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553a:	d204      	bcs.n	8005546 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e0b6      	b.n	80056b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800554c:	e0b2      	b.n	80056b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005556:	d15e      	bne.n	8005616 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800555c:	2b08      	cmp	r3, #8
 800555e:	d828      	bhi.n	80055b2 <UART_SetConfig+0x44a>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <UART_SetConfig+0x400>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800558d 	.word	0x0800558d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559d 	.word	0x0800559d
 8005574:	080055b3 	.word	0x080055b3
 8005578:	080055a3 	.word	0x080055a3
 800557c:	080055b3 	.word	0x080055b3
 8005580:	080055b3 	.word	0x080055b3
 8005584:	080055b3 	.word	0x080055b3
 8005588:	080055ab 	.word	0x080055ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fd f974 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8005590:	61f8      	str	r0, [r7, #28]
        break;
 8005592:	e014      	b.n	80055be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005594:	f7fd f986 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8005598:	61f8      	str	r0, [r7, #28]
        break;
 800559a:	e010      	b.n	80055be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800559c:	4b4d      	ldr	r3, [pc, #308]	@ (80056d4 <UART_SetConfig+0x56c>)
 800559e:	61fb      	str	r3, [r7, #28]
        break;
 80055a0:	e00d      	b.n	80055be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fd f8d1 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80055a6:	61f8      	str	r0, [r7, #28]
        break;
 80055a8:	e009      	b.n	80055be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ae:	61fb      	str	r3, [r7, #28]
        break;
 80055b0:	e005      	b.n	80055be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d077      	beq.n	80056b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	005a      	lsls	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	441a      	add	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d916      	bls.n	800560e <UART_SetConfig+0x4a6>
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e6:	d212      	bcs.n	800560e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f023 030f 	bic.w	r3, r3, #15
 80055f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	8afb      	ldrh	r3, [r7, #22]
 8005600:	4313      	orrs	r3, r2
 8005602:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	8afa      	ldrh	r2, [r7, #22]
 800560a:	60da      	str	r2, [r3, #12]
 800560c:	e052      	b.n	80056b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005614:	e04e      	b.n	80056b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005616:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800561a:	2b08      	cmp	r3, #8
 800561c:	d827      	bhi.n	800566e <UART_SetConfig+0x506>
 800561e:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0x4bc>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fd f916 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 800564c:	61f8      	str	r0, [r7, #28]
        break;
 800564e:	e014      	b.n	800567a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fd f928 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8005654:	61f8      	str	r0, [r7, #28]
        break;
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <UART_SetConfig+0x56c>)
 800565a:	61fb      	str	r3, [r7, #28]
        break;
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fd f873 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8005662:	61f8      	str	r0, [r7, #28]
        break;
 8005664:	e009      	b.n	800567a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566a:	61fb      	str	r3, [r7, #28]
        break;
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005678:	bf00      	nop
    }

    if (pclk != 0U)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d019      	beq.n	80056b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	085a      	lsrs	r2, r3, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d909      	bls.n	80056ae <UART_SetConfig+0x546>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d205      	bcs.n	80056ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e002      	b.n	80056b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3728      	adds	r7, #40	@ 0x28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ce:	bf00      	nop
 80056d0:	40008000 	.word	0x40008000
 80056d4:	00f42400 	.word	0x00f42400

080056d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057d6:	d10a      	bne.n	80057ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b098      	sub	sp, #96	@ 0x60
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800582c:	f7fb ff54 	bl	80016d8 <HAL_GetTick>
 8005830:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d12e      	bne.n	800589e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f88c 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d021      	beq.n	800589e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800586e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005878:	647b      	str	r3, [r7, #68]	@ 0x44
 800587a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800587e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e062      	b.n	8005964 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d149      	bne.n	8005940 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f856 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03c      	beq.n	8005940 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	623b      	str	r3, [r7, #32]
   return(result);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80058e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	60fb      	str	r3, [r7, #12]
   return(result);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	617b      	str	r3, [r7, #20]
   return(result);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e011      	b.n	8005964 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3758      	adds	r7, #88	@ 0x58
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	e049      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d045      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fb fea7 	bl	80016d8 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x30>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e048      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d031      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d110      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f838 	bl	8005a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2208      	movs	r2, #8
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e029      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ec:	d111      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f81e 	bl	8005a3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e00f      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d0a6      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b095      	sub	sp, #84	@ 0x54
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d118      	bne.n	8005ae2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f023 0310 	bic.w	r3, r3, #16
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005af6:	bf00      	nop
 8005af8:	3754      	adds	r7, #84	@ 0x54
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <memset>:
 8005b02:	4402      	add	r2, r0
 8005b04:	4603      	mov	r3, r0
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d100      	bne.n	8005b0c <memset+0xa>
 8005b0a:	4770      	bx	lr
 8005b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b10:	e7f9      	b.n	8005b06 <memset+0x4>
	...

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4d0d      	ldr	r5, [pc, #52]	@ (8005b4c <__libc_init_array+0x38>)
 8005b18:	4c0d      	ldr	r4, [pc, #52]	@ (8005b50 <__libc_init_array+0x3c>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	2600      	movs	r6, #0
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	4d0b      	ldr	r5, [pc, #44]	@ (8005b54 <__libc_init_array+0x40>)
 8005b26:	4c0c      	ldr	r4, [pc, #48]	@ (8005b58 <__libc_init_array+0x44>)
 8005b28:	f000 f818 	bl	8005b5c <_init>
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	2600      	movs	r6, #0
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3c:	4798      	blx	r3
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b46:	4798      	blx	r3
 8005b48:	3601      	adds	r6, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	08005bc4 	.word	0x08005bc4
 8005b50:	08005bc4 	.word	0x08005bc4
 8005b54:	08005bc4 	.word	0x08005bc4
 8005b58:	08005bc8 	.word	0x08005bc8

08005b5c <_init>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr

08005b68 <_fini>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr
